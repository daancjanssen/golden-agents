package org.uu.nl.goldenagents.netmodels;

import org.apache.jena.ontology.OntClass;
import org.apache.jena.ontology.OntModel;
import org.apache.jena.ontology.OntProperty;
import org.apache.jena.rdf.model.Resource;
import org.uu.nl.net2apl.core.fipa.acl.FIPASendableObject;

import java.io.Serializable;
import java.util.List;
import java.util.UUID;
import java.util.stream.Collectors;

/**
 * This class is used to wrap the suggestions generated by a single DB agent for classes and properties before
 * sending them back to the broker agent.
 *
 * It is NOT redundant with the @{AQLSuggestions} class, since there a single list for both forward & backward crossing
 * properties is used, and both classes and properties are filtered with those that are applicable given the used
 * ontology. Moreover, data sources do not suggest individuals
 */
public class AqlDbTypeSuggestionWrapper implements FIPASendableObject, Serializable {
    private List<String> classSuggestions;
    private List<String> forwardCrossingOntologyProperties; // p of q1    (y p x, y is fresh)
    private List<String> backwardCrossingOntologyProperties; // p : q1    (x p y, y is fresh)

    private UUID conversationID;

    /**
     * Construct a new instance of the wrapper of AQL suggestions as generated by the data source agent
     * @param classSuggestions                      List of suggested classes for given entities
     * @param forwardCrossingOntologyProperties     List of suggested forward crossing properties for given entities
     * @param backwardCrossingOntologyProperties    List of suggested backward crossing properties for given entities
     * @param conversationID                        ConversationID of broker suggestion request
     */
    public AqlDbTypeSuggestionWrapper(
            List<Resource> classSuggestions,
            List<Resource> forwardCrossingOntologyProperties,
            List<Resource> backwardCrossingOntologyProperties,
            UUID conversationID) {
        this.classSuggestions = classSuggestions.stream().map(Resource::getURI).collect(Collectors.toList());
        this.forwardCrossingOntologyProperties = forwardCrossingOntologyProperties.stream().map(Resource::getURI).collect(Collectors.toList());
        this.backwardCrossingOntologyProperties = backwardCrossingOntologyProperties.stream().map(Resource::getURI).collect(Collectors.toList());
        this.conversationID = conversationID;
    }

    /**
     * Get the list of class suggestions
     * @param model The ontology model, required to convert URI's back to OntClass objects
     * @return      List of OntClass objects suggested by the DB agent sending this object
     */
    public List<OntClass> getClassSuggestions(OntModel model) {
        return this.classSuggestions.stream().map(model::getOntClass).collect(Collectors.toList());
    }

    /**
     * Replace the class suggestions with a new list of resource URI's
     * @param classSuggestions  List of class URI's for class suggestions
     */
    public void setClassSuggestions(List<String> classSuggestions) {
        this.classSuggestions = classSuggestions;
    }

    /**
     * Get the list of forward crossing property suggestions
     * @param model The ontology model, required to convert URI's back to OntProperty objects
     * @return      List of forward crossing OntProperty objects suggested by the DB agent sending this object
     */
    public List<OntProperty> getForwardCrossingOntologyProperties(OntModel model) {
        return forwardCrossingOntologyProperties.stream().map(model::getOntProperty).collect(Collectors.toList());
    }

    /**
     * Replace the forward crossing properties suggestions with a new list of resource URI's
     * @param forwardCrossingOntologyProperties List of forward crossing property URI's for suggestions
     */
    public void setForwardCrossingOntologyProperties(List<String> forwardCrossingOntologyProperties) {
        this.forwardCrossingOntologyProperties = forwardCrossingOntologyProperties;
    }

    /**
     * Get the list of backward crossing property suggestions
     * @param model The ontology model, required to convert URI's back to OntProperty objects
     * @return      List of backward crossing OntProperty objects suggested by the DB agent sending this object
     */
    public List<OntProperty> getBackwardCrossingOntologyProperties(OntModel model) {
        return backwardCrossingOntologyProperties.stream().map(model::getOntProperty).collect(Collectors.toList());
    }

    /**
     * Replace the forward crossing properties suggestions with a new list of resource URI's
     * @param backwardCrossingOntologyProperties List of backward crossing property URI's for suggestions
     */
    public void setBackwardCrossingOntologyProperties(List<String> backwardCrossingOntologyProperties) {
        this.backwardCrossingOntologyProperties = backwardCrossingOntologyProperties;
    }

    /**
     * Get the UUID of the conversation in which the suggestions were requested
     * @return  UUID of conversation in which suggestions were requested
     */
    public UUID getConversationID() {
        return conversationID;
    }

    /**
     * Update the UUID of the conversation to which these suggestions are a response
     * @param conversationID    Conversation ID
     */
    public void setConversationID(UUID conversationID) {
        this.conversationID = conversationID;
    }
}
